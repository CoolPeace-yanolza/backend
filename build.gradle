plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.7'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

bootJar.enabled = false
jar.enabled = true

subprojects {
    group = 'com.coolpeace'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.epages.restdocs-api-spec'
    apply plugin: 'org.hidetake.swagger.generator'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'com.github.javafaker:javafaker:1.0.2'
        testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.named('bootBuildImage') {
        builder = 'paketobuildpacks/builder-jammy-base:latest'
    }

    tasks.named('test') {
        systemProperty "spring.profiles.active", "test"
        useJUnitPlatform()
tasks.named('test') {
    systemProperty "spring.profiles.active", "test"
    useJUnitPlatform()
}

// QueryDSL 설정
def querydslDir = "build/generated/querydsl"

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

sourceSets {
    main.java.srcDir querydslDir
}

def isProd = project.hasProperty('prod')

// Swagger UI 설정
openapi3 {
    server = isProd ? "https://coolpeace.store" : "http://localhost:8080"
    title = "CoolPeace API"
    description = "CoolPeace API Document"
    version = "0.0.1"
    format = "yaml"
}

def openapi3Path = "build/api-spec/openapi3.yaml"
def srcStaticDirPath = "src/main/resources/static/swagger-ui/"

tasks.register("copyToSwaggerUI") {
    dependsOn "openapi3"
    doLast {
        copy {
            from openapi3Path
            into srcStaticDirPath
        }
    }
}


tasks.register("copyTextToSecurity") {
    dependsOn copyToSwaggerUI
    doLast {
        def openapi3File = file(openapi3Path)
        def securityFile = file("src/test/resources/security.yaml")
        openapi3File.append securityFile.text
    }
}

clean {
    delete "$srcStaticDirPath/openapi3.yaml"
}

test.finalizedBy copyTextToSecurity